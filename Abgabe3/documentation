Aufgabe 1:
1.
a) Das Signal wird ganz normal vom Handler verarbeitet. Unabhängig von der Häufigkeit der Signale.
b) Das Signal wird per Standard verarbeitet und die Verarbeitungsmethode nicht durch den Handler überschrieben.
2.

3.
Ja, z. B. durch eine ssh-Verbindung. Solange man einen Fernzugriff auf den PC hat kann man das Signal auch absenden. Dies erfolgt dann allerdings lokal auf der Maschine. Ansonsten kann man eine Signalabsetzung durch ein Script Inject durchführen. Beide Methoden setzen jedoch auf eine lokale Ausführung der Signale.
4.
a) Mit Hilfe von signal.SIG_IGN kann man Signale ignorieren.
b) signal.SIG_DFL führt das Standardverhalten des übergebenen Signals aus.

Aufgabe 2:
1. 
a. Interruptanforderungen werden nach Ablauf der aktuell laufenden Instruktion akzeptiert
b. Der Interruptvektor des Interrupt Requests mit der höchsten Priorität wird von der Hardware bestimmt
c. CPU akzeptiert die Unterbrechungsanforderung (Interruptzyklus durchführen, Interrupteingang maskieren -> Stackoverflow verhindern)
d. Befehlszähler-Stand und evtl. Statusregister werden im Zyklus auf dem Stack gesichert.
e. Der neue Stand wird berechnet.
f. Die Software der Interrupt Service Routine startet und sicher die Inhalte der Register die es selbst verwendet.
g. Die Internet Service Routine wird durchgeführt.
h. Wiederherstellung der von der Software der ISR gesicherten Register
i. ISR wird durch einen Rücksprung beendet (Alten Zählerstand und evtl. Statusregister wiederherstellen => "back to the roots")
j. Der Task kann weiter arbeiten

2.
Mit Hilfe des Interruptvektors des Interrupt Requests

3.
Durch Maskenbits in Interruptmaskenregistern oder durch eine globale Interruptstuerung über ein CPU-Statusbit.

Aufgabe 3:

2.
a) Trägt einen Prozess in die Prozessliste ein. Dabei kann der Parameter für den Startzeitpunkt auch in der Zukunft liegen. Der Prozess beginnt mit einer I/O-Phase, wenn der Parameter behavior 0 ist.
b) Lässt den aktuellen Prozess eine Zeiteinheit lang rechnen. Wenn der Prozess zum ersten Mal ausgeführt wird, soll die Zeit gemerkt werden. Die verbleibende Rechenzeit des Prozesses wird entsprechend verringert.
c) Sucht die blockierten Prozesse aus der Liste blocked heraus und bearbeitet diese nur, wenn er bereits im System ist und nicht gerade erst in blocked geschoben wurde. Wenn behavior vom Prozess gleich 0 wird die aktuelle I/O-Phase abgeschlossen.

3.
FCFS:
Endzeit: 19
Trace: [0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 'END']
Laufzeiten:
PID Ankunft Rechenz Startze Endzeit TurnAro  Quotient
-----------------------------------------------------
  0       0       9       0      13      13    1.4444
  1       0       5       2      17      17    3.4000
  2       0       5       3      19      19    3.8000

SJF:
Endzeit: 19
Trace: [0, 1, 2, 0, 2, 2, 1, 0, 1, 0, 1, 2, 0, 1, 2, 0, 0, 0, 0, 'END']
Laufzeiten:
PID Ankunft Rechenz Startze Endzeit TurnAro  Quotient
-----------------------------------------------------
  0       0       9       0      19      19    2.1111
  1       0       5       1      14      14    2.8000
  2       0       5       2      15      15    3.0000

PID 2 und 1 profitieren durch eine schnellere Abfertigung. PID 0 hingegen ist deutlich später fertig als bei FCFS.
